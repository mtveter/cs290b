/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.awt.event.ItemEvent;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.Set;

import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.DefaultListSelectionModel;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;


/**
 *
 * @author Varun
 */
public class SpaceConsoleGUI extends javax.swing.JFrame implements SpaceConsole {

    private static final int MAX_NO_OF_LATENCIES_IN_GRAPH = 20;
	SpaceController spaceController;
    
    /**
     * Creates new form SpaceConsoleGUI
     */
    public SpaceConsoleGUI() {
        initComponents();
        spaceController = new SpaceController(this);
        //initThreads();
    }

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        pruningEfficiencyLabel = new javax.swing.JLabel();
        avgPruningDepthLabel = new javax.swing.JLabel();
        activeTasksLabel = new javax.swing.JLabel();
        completedTasksLabel = new javax.swing.JLabel();
        generatedTasksLabel = new javax.swing.JLabel();
        avgPruningDepthValueLabel = new javax.swing.JLabel();
        pruningEfficiencyValueLabel = new javax.swing.JLabel();
        generatedTasksValueLabel = new javax.swing.JLabel();
        completedTasksValueLabel = new javax.swing.JLabel();
        activeTasksValueLabel = new javax.swing.JLabel();
        computersLabel = new javax.swing.JLabel();
        computersValueLabel = new javax.swing.JLabel();
        graphPanel = new gui.GraphPanel();
        avgLatencyValueLabel = new javax.swing.JLabel();
        avgLatencyLabel = new javax.swing.JLabel();
        computersScrollPane = new javax.swing.JScrollPane();
        computersList = new javax.swing.JList();
        jSeparator1 = new javax.swing.JSeparator();
        computerLatenciesHeaderLabel = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabelStatus = new javax.swing.JLabel();
        estimatedTimeLeftLabel = new javax.swing.JLabel();
        estimatedTimeLeftValueLabel = new javax.swing.JLabel();
        spaceLabel = new javax.swing.JLabel();
        hasSpaceRunnableCheckBox = new javax.swing.JCheckBox();
        startSpaceButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setPreferredSize(new java.awt.Dimension(400, 540));

        pruningEfficiencyLabel.setText("Pruning efficiency (pruned / generated):");

        avgPruningDepthLabel.setText("Avg. pruning depth:");

        activeTasksLabel.setText("Active tasks:");

        completedTasksLabel.setText("Completed tasks:");

        generatedTasksLabel.setText("Generated tasks:");

        avgPruningDepthValueLabel.setText("0");

        pruningEfficiencyValueLabel.setText("0");

        generatedTasksValueLabel.setText("0");

        completedTasksValueLabel.setText("0");

        activeTasksValueLabel.setText("0");

        computersLabel.setText("Computers:");

        computersValueLabel.setText("0");

        avgLatencyValueLabel.setText("- ms");

        avgLatencyLabel.setText("Avg. latency:");

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, graphPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(avgLatencyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(avgLatencyValueLabel)
                .addContainerGap())
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphPanelLayout.createSequentialGroup()
                .addGroup(graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(avgLatencyValueLabel)
                    .addComponent(avgLatencyLabel))
                .addGap(0, 258, Short.MAX_VALUE))
        );
        
        computersList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        computersList.addListSelectionListener(new ListSelectionListener() {
        	
        	DefaultListSelectionModel model = (DefaultListSelectionModel) computersList.getSelectionModel();
       
        	// remember the last selection index
             int lastSelectedIndex;
   
             public void valueChanged(ListSelectionEvent e)
             {
            	 if(!e.getValueIsAdjusting()) {
                     int minIndex = model.getMinSelectionIndex();
                     int maxIndex = model.getMaxSelectionIndex();
                     int anchorIndex = model.getAnchorSelectionIndex();
                     int leadIndex   = model.getLeadSelectionIndex();
                     if(minIndex == -1)
                     {
                         model.setLeadSelectionIndex(lastSelectedIndex);
                     }
                     else
                         lastSelectedIndex = minIndex;
                     System.out.println("minIndex    = " + minIndex + " \t" +
                                "maxIndex  = " + maxIndex + "\n" +
                                "anchorIndex = " + anchorIndex + " \t" +
                                "leadIndex = " + leadIndex + "\n");
         }
     }
             });

        computersScrollPane.setViewportView(computersList);

        computerLatenciesHeaderLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        computerLatenciesHeaderLabel.setText("Computer Latencies");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(computersScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(computerLatenciesHeaderLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(activeTasksLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(activeTasksValueLabel))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(computersLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(computersValueLabel))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(generatedTasksLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(generatedTasksValueLabel))
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(completedTasksLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(completedTasksValueLabel)))
                                .addGap(95, 95, 95)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(pruningEfficiencyLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pruningEfficiencyValueLabel))
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(avgPruningDepthLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(avgPruningDepthValueLabel)))))
                        .addGap(0, 240, Short.MAX_VALUE))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(computersLabel)
                    .addComponent(computersValueLabel))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generatedTasksLabel)
                    .addComponent(generatedTasksValueLabel)
                    .addComponent(avgPruningDepthLabel)
                    .addComponent(avgPruningDepthValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(completedTasksLabel)
                    .addComponent(completedTasksValueLabel)
                    .addComponent(pruningEfficiencyLabel)
                    .addComponent(pruningEfficiencyValueLabel))
                .addGap(6, 6, 6)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(activeTasksLabel)
                    .addComponent(activeTasksValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 64, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(computerLatenciesHeaderLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(computersScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))))
        );

        jProgressBar1.setStringPainted(true);

        jLabelStatus.setText("Working...");

        estimatedTimeLeftLabel.setText("Estimated time left:");

        estimatedTimeLeftValueLabel.setText("N/A");

        spaceLabel.setText("Space");

        hasSpaceRunnableCheckBox.setText("SpaceRunnable");
        hasSpaceRunnableCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hasSpaceRunnableCheckBoxActionPerformed(evt);
            }
        });

        startSpaceButton.setText("Start Space");
        startSpaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSpaceButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(spaceLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(hasSpaceRunnableCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startSpaceButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabelStatus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(estimatedTimeLeftLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(estimatedTimeLeftValueLabel)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spaceLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(startSpaceButton)
                        .addComponent(hasSpaceRunnableCheckBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelStatus)
                    .addComponent(estimatedTimeLeftLabel)
                    .addComponent(estimatedTimeLeftValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hasSpaceRunnableCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hasSpaceRunnableCheckBoxActionPerformed
        spaceController.setHasSpaceRunnableTasks(hasSpaceRunnableCheckBox.isSelected());
    }//GEN-LAST:event_hasSpaceRunnableCheckBoxActionPerformed
    
	private void startSpaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSpaceButtonActionPerformed
        spaceController.startSpace();
    }//GEN-LAST:event_startSpaceButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            /*for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }*/
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SpaceConsoleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SpaceConsoleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SpaceConsoleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpaceConsoleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpaceConsoleGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel activeTasksLabel;
    private javax.swing.JLabel activeTasksValueLabel;
    private javax.swing.JLabel avgLatencyLabel;
    private javax.swing.JLabel avgLatencyValueLabel;
    private javax.swing.JLabel avgPruningDepthLabel;
    private javax.swing.JLabel avgPruningDepthValueLabel;
    private javax.swing.JLabel completedTasksLabel;
    private javax.swing.JLabel completedTasksValueLabel;
    private javax.swing.JLabel computerLatenciesHeaderLabel;
    private javax.swing.JLabel computersLabel;
    private javax.swing.JList computersList;
    private javax.swing.JScrollPane computersScrollPane;
    private javax.swing.JLabel computersValueLabel;
    private javax.swing.JLabel estimatedTimeLeftLabel;
    private javax.swing.JLabel estimatedTimeLeftValueLabel;
    private javax.swing.JLabel generatedTasksLabel;
    private javax.swing.JLabel generatedTasksValueLabel;
    private gui.GraphPanel graphPanel;
    private javax.swing.JCheckBox hasSpaceRunnableCheckBox;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel pruningEfficiencyLabel;
    private javax.swing.JLabel pruningEfficiencyValueLabel;
    private javax.swing.JLabel spaceLabel;
    private javax.swing.JButton startSpaceButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void updateComputersList(){
    	LatencyData latencyData = spaceController.getLatencyData();
    	Set<String> computers = latencyData.getComputers();
    	String[] computersArray = new String[computers.size()];
    	computersArray = computers.toArray(computersArray);
    	Arrays.sort(computersArray);
    	DefaultListModel<String> model = new DefaultListModel<String>();
    	for (String computer : computersArray){
    		model.addElement(computer);
    	}
    	computersList.setModel(model);
    	int selectIndex;
    	if (computersList.getSelectedIndex() == - 1 && (selectIndex = computersList.getFirstVisibleIndex()) != -1){
    		computersList.setSelectedIndex(selectIndex);
    	}
    }

	private void updateLatencies() {
		Object selectedItem = computersList.getSelectedValue();
		if (selectedItem == null) return;
		String computer = selectedItem.toString();
		System.out.println("Selected computer: "+computer);
		List<Double> mostRecentLatencies = spaceController.getLatencyData().getMostRecentLatencies(computer, MAX_NO_OF_LATENCIES_IN_GRAPH);
		if (mostRecentLatencies != null) {
			graphPanel.setScores(mostRecentLatencies);
			avgLatencyValueLabel.setText(String.format(Locale.US, "%.2f ms", LatencyData.getAverage(mostRecentLatencies)));
		}
	}
	
    private void initThreads() {
		Thread updateLatenciesThread = new Thread(new Runnable(){
			@Override
			public void run() {
				while (true) {
					if (spaceController.isSpaceActive() && spaceController.hasActiveComputers() && spaceController.isTaskActive()){
						updateLatencies();
						try {
							Thread.sleep(500);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}	
					}
				}
			}
			
		});
		updateLatenciesThread.start();
	}
    
    public void setSpaceActive(){
    	initThreads();
    	startSpaceButton.setEnabled(false);
    	hasSpaceRunnableCheckBox.setEnabled(false);
    	spaceLabel.setText("Space is active.");
    	spaceLabel.setForeground(new Color(75,175,0));
    }
    
    public void setTaskStarted(){
    	jLabelStatus.setText("Working...");
    	estimatedTimeLeftLabel.setVisible(true);
    	estimatedTimeLeftValueLabel.setVisible(true);
    }
    
    public void setTaskFinished(){
    	jLabelStatus.setText("Done.");
    	estimatedTimeLeftLabel.setVisible(false);
    	estimatedTimeLeftValueLabel.setVisible(false);
    }

	@Override
	public void setComputers(int n) {
		computersValueLabel.setText(n+"");
	}

	@Override
	public void setGeneratedTasks(int n) {
		generatedTasksValueLabel.setText(n+"");
	}

	@Override
	public void setCompletedTasks(int n) {
		completedTasksValueLabel.setText(n+"");
	}

	@Override
	public void setActiveTasks(int n) {
		activeTasksValueLabel.setText(n+"");
	}

	@Override
	public void setAvgPruningDepth(double d) {
		avgPruningDepthValueLabel.setText(d+"");
	}

	@Override
	public void setPruningEfficiency(double d) {
		pruningEfficiencyValueLabel.setText(d+"");
	}

	@Override
	public void setProgress(int n) {
		jProgressBar1.setValue(n);
	}

	@Override
	public void setStatus(String s) {
		jLabelStatus.setText(s);
	}

	@Override
	public void setEstimatedTimeLeft(String s) {
		estimatedTimeLeftValueLabel.setText(s);
	}
}
