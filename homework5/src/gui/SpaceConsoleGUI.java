/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.awt.event.ItemEvent;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.UIManager;


/**
 *
 * @author Varun
 */
public class SpaceConsoleGUI extends javax.swing.JFrame implements SpaceConsole {

    private static final int MAX_NO_OF_LATENCIES_IN_GRAPH = 20;
	SpaceController spaceController;
    
    /**
     * Creates new form SpaceConsoleGUI
     */
    public SpaceConsoleGUI() {
        initComponents();
        spaceController = new SpaceController(this);
        initThreads();
    }

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        mainPanel = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabelStatus = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        maxDepthLabel = new javax.swing.JLabel();
        avgPruningDepthLabel = new javax.swing.JLabel();
        totalTasksLabel = new javax.swing.JLabel();
        finishedTasksLabel = new javax.swing.JLabel();
        activeTasksLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        spaceLabel = new javax.swing.JLabel();
        hasSpaceRunnableCheckBox = new javax.swing.JCheckBox();
        startSpaceButton = new javax.swing.JButton();
        avgPruningDepthValueLabel = new javax.swing.JLabel();
        maxDepthValueLabel = new javax.swing.JLabel();
        activeTasksValueLabel = new javax.swing.JLabel();
        finishedTasksValueLabel = new javax.swing.JLabel();
        totalTasksValueLabel = new javax.swing.JLabel();
        estimatedTimeLeftValueLabel = new javax.swing.JLabel();
        estimatedTimeLeftLabel = new javax.swing.JLabel();
        latencyPanel = new javax.swing.JPanel();
        graphPanel = new gui.GraphPanel();
        computerComboBox = new javax.swing.JComboBox();
        avgLatencyValueLabel = new javax.swing.JLabel();
        avgLatencyLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jProgressBar1.setStringPainted(true);

        jLabelStatus.setText("");

        jButton1.setText("Click");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        maxDepthLabel.setText("Max depth:");

        avgPruningDepthLabel.setText("Avg. pruning depth:");

        totalTasksLabel.setText("Total tasks:");

        finishedTasksLabel.setText("Finished tasks:");

        activeTasksLabel.setText("Active tasks:");

        spaceLabel.setText("Space");

        hasSpaceRunnableCheckBox.setText("hasSpaceRunnable");
        hasSpaceRunnableCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hasSpaceRunnableCheckBoxActionPerformed(evt);
            }
        });

        startSpaceButton.setText("Start Space");
        startSpaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSpaceButtonActionPerformed(evt);
            }
        });

        avgPruningDepthValueLabel.setText("0");

        maxDepthValueLabel.setText("0");

        activeTasksValueLabel.setText("0");

        finishedTasksValueLabel.setText("0");

        totalTasksValueLabel.setText("0");

        estimatedTimeLeftValueLabel.setText("");
        estimatedTimeLeftValueLabel.setVisible(false);

        estimatedTimeLeftLabel.setText("Estimated time left:");
        estimatedTimeLeftLabel.setVisible(false);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(spaceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 376, Short.MAX_VALUE)
                        .addComponent(hasSpaceRunnableCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startSpaceButton))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(avgPruningDepthLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(avgPruningDepthValueLabel))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(maxDepthLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(maxDepthValueLabel))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(activeTasksLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(activeTasksValueLabel))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(finishedTasksLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(finishedTasksValueLabel))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(totalTasksLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalTasksValueLabel)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jLabelStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(estimatedTimeLeftLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(estimatedTimeLeftValueLabel)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(spaceLabel)
                        .addComponent(hasSpaceRunnableCheckBox))
                    .addComponent(startSpaceButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(activeTasksLabel)
                    .addComponent(activeTasksValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finishedTasksLabel)
                    .addComponent(finishedTasksValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalTasksLabel)
                    .addComponent(totalTasksValueLabel))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(avgPruningDepthLabel)
                    .addComponent(avgPruningDepthValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxDepthLabel)
                    .addComponent(maxDepthValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelStatus)
                    .addComponent(estimatedTimeLeftValueLabel)
                    .addComponent(estimatedTimeLeftLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Main", mainPanel);

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 255, Short.MAX_VALUE)
        );

        //computerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Computer 1 [192.212.233.12]", "Computer 2 [192.212.234.1]", "Computer 3 [192.189.201.5]", "Computer 4 [192.189.201.10]" }));
        computerComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                computerComboBoxItemStateChanged(evt);
            }
        });
        computerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computerComboBoxActionPerformed(evt);
            }
        });

        avgLatencyValueLabel.setText("-");

        avgLatencyLabel.setText("Avg. latency:");

        javax.swing.GroupLayout latencyPanelLayout = new javax.swing.GroupLayout(latencyPanel);
        latencyPanel.setLayout(latencyPanelLayout);
        latencyPanelLayout.setHorizontalGroup(
            latencyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(latencyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(computerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 326, Short.MAX_VALUE)
                .addComponent(avgLatencyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(avgLatencyValueLabel)
                .addContainerGap())
        );
        latencyPanelLayout.setVerticalGroup(
            latencyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, latencyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(latencyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(computerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(avgLatencyValueLabel)
                    .addComponent(avgLatencyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Latency", latencyPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //jProgressBar1.setValue(jProgressBar1.getValue()+5);
        TimeLeftEstimation tle = new TimeLeftEstimation();
        Thread t = new Thread(new Runnable(){

            @Override
            public void run() {
                tle.start();
                estimatedTimeLeftLabel.setVisible(true);
                estimatedTimeLeftValueLabel.setVisible(true);
                estimatedTimeLeftValueLabel.setText("-");
                int progress;
                while ((progress = jProgressBar1.getValue()) <= 100){
                    graphPanel.addValue((double) new Random().nextDouble()*100);
                    jProgressBar1.setValue(progress+1);
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SpaceConsoleGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (progress > 5){
                    	tle.updateEstimation(progress);
                    	estimatedTimeLeftValueLabel.setText(tle.toString());
                    }
                }
                jLabelStatus.setText("Done.");
            }
            
        });
        t.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void hasSpaceRunnableCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hasSpaceRunnableCheckBoxActionPerformed
        spaceController.setHasSpaceRunnableTasks(hasSpaceRunnableCheckBox.isSelected());
    }//GEN-LAST:event_hasSpaceRunnableCheckBoxActionPerformed

    private void computerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computerComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_computerComboBoxActionPerformed

    private void computerComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_computerComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            //graphPanel.setRandomScores();
        	updateLatencies();
        }
    }//GEN-LAST:event_computerComboBoxItemStateChanged
    
	private void startSpaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSpaceButtonActionPerformed
        spaceController.startSpace();
    }//GEN-LAST:event_startSpaceButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            /*for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }*/
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SpaceConsoleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SpaceConsoleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SpaceConsoleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpaceConsoleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpaceConsoleGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel activeTasksLabel;
    private javax.swing.JLabel activeTasksValueLabel;
    private javax.swing.JLabel avgLatencyLabel;
    private javax.swing.JLabel avgLatencyValueLabel;
    private javax.swing.JLabel avgPruningDepthLabel;
    private javax.swing.JLabel avgPruningDepthValueLabel;
    private javax.swing.JComboBox computerComboBox;
    private javax.swing.JLabel estimatedTimeLeftLabel;
    private javax.swing.JLabel estimatedTimeLeftValueLabel;
    private javax.swing.JLabel finishedTasksLabel;
    private javax.swing.JLabel finishedTasksValueLabel;
    private gui.GraphPanel graphPanel;
    private javax.swing.JCheckBox hasSpaceRunnableCheckBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel latencyPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel maxDepthLabel;
    private javax.swing.JLabel maxDepthValueLabel;
    private javax.swing.JLabel spaceLabel;
    private javax.swing.JButton startSpaceButton;
    private javax.swing.JLabel totalTasksLabel;
    private javax.swing.JLabel totalTasksValueLabel;
    // End of variables declaration//GEN-END:variables

	@Override
	public void setActiveTasks(int n) {
		activeTasksValueLabel.setText(n+"");
	}

	@Override
	public void setFinishedTasks(int n) {
		finishedTasksValueLabel.setText(n+"");
	}

	@Override
	public void setTotalTasks(int n) {
		totalTasksValueLabel.setText(n+"");
	}

	@Override
	public void setAvgPruningDepth(double d) {
		avgPruningDepthValueLabel.setText(d+"");
	}

	@Override
	public void setMaxDepth(int n) {
		maxDepthValueLabel.setText(n+"");
	}

	@Override
	public void setProgress(int n) {
		jProgressBar1.setValue(n);
	}

	@Override
	public void setStatus(String s) {
		jLabelStatus.setText(s);
	}

	@Override
	public void setEstimatedTimeLeft(String s) {
		estimatedTimeLeftValueLabel.setText(s);
	}

	/*@Override
	public void setLatencyData(LatencyData latencyData) {
		this.latencyData = latencyData;
	}*/

	/*@Override
	public void addLatencyValue(String computer, double value) {
		graphPanel.addValue(value);
	}*/
    
    @Override
    public void updateComputersList(){
    	LatencyData latencyData = spaceController.getLatencyData();
    	Set<String> computers = latencyData.getComputers();
    	String[] computersArray = new String[computers.size()];
    	computersArray = computers.toArray(computersArray);
    	Arrays.sort(computersArray);
    	computerComboBox.setModel(new DefaultComboBoxModel<String>(computersArray));
    }

	private void updateLatencies() {
		Object selectedItem = computerComboBox.getSelectedItem();
		if (selectedItem == null) return;
		String computer = selectedItem.toString();
		System.out.println("Selected computer: "+computer);
		List<Double> mostRecentLatencies = spaceController.getLatencyData().getMostRecentLatencies(computer, MAX_NO_OF_LATENCIES_IN_GRAPH);
		if (mostRecentLatencies != null) {
			graphPanel.setScores(mostRecentLatencies);
			avgLatencyValueLabel.setText(String.format(Locale.US, "%.2f ms", LatencyData.getAverage(mostRecentLatencies)));
		}
	}
	
    private void initThreads() {
		Thread updateLatenciesThread = new Thread(new Runnable(){
			@Override
			public void run() {
				while (true) {
					if (spaceController.isSpaceActive() && spaceController.hasActiveComputers() && spaceController.isTaskActive()){
						updateLatencies();
						try {
							Thread.sleep(500);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}	
					}
				}
			}
			
		});
		updateLatenciesThread.start();
	}
    
    public void setSpaceActive(){
    	initThreads();
    	startSpaceButton.setEnabled(false);
    	hasSpaceRunnableCheckBox.setEnabled(false);
    	spaceLabel.setText("Space is active.");
    	spaceLabel.setForeground(new Color(75,175,0));
    }
    
    public void setTaskStarted(){
    	jLabelStatus.setText("Working...");
    	estimatedTimeLeftLabel.setVisible(true);
    	estimatedTimeLeftValueLabel.setVisible(true);
    }
    
    public void setTaskFinished(){
    	jLabelStatus.setText("Done.");
    	estimatedTimeLeftLabel.setVisible(false);
    	estimatedTimeLeftValueLabel.setVisible(false);
    }

}
